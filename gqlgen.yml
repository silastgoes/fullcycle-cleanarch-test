# Onde estão localizados os arquivos de schema? Globs são suportados, por exemplo, src/**/*.graphqls
schema:
  - graph/*.graphqls

# Onde o código do servidor gerado deve ir?
exec:
  filename: graph/generated/generated.go
  package: generated

# Onde os modelos gerados devem ir?
model:
  filename: graph/generated/model/models_gen.go
  package: model

# Onde as implementações dos resolvers devem ir?
resolver:
  layout: follow-schema
  dir: graph/generated/resolvers
  package: resolvers

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn off to make struct-type struct fields not use pointers
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  # - "github.com/silastgoes/fullcycle-cleanarch-test/graph/model"

# Esta seção declara o mapeamento de tipos entre os sistemas de tipos GraphQL e Go
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32