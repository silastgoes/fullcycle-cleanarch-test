package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"

	"github.com/silastgoes/fullcycle-cleanarch-test/internal/infra/graph/generated"
	"github.com/silastgoes/fullcycle-cleanarch-test/internal/infra/graph/generated/model"
	"github.com/silastgoes/fullcycle-cleanarch-test/internal/usecase"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, in *model.OrderInput) (*model.Order, error) {
	dto := usecase.OrderInputDTO{
		ID:    in.ID,
		Price: float64(in.Price),
		Tax:   float64(in.Tax),
	}
	output, err := r.CreateOrderUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}
	return &model.Order{
		ID:         output.ID,
		Price:      output.Price,
		Tax:        output.Tax,
		FinalPrice: output.FinalPrice,
	}, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	list := make([]*model.Order, 0)

	output, err := r.ListOrderUsecase.Execute()
	if err != nil {
		return nil, err
	}

	for _, order := range output {
		dto := &model.Order{
			ID:         order.ID,
			Price:      order.Price,
			Tax:        order.Tax,
			FinalPrice: order.FinalPrice,
		}
		list = append(list, dto)
	}

	return list, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
